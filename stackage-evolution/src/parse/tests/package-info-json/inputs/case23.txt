getHsType :: QName -> ToHs HS.Type
getHsType x = do
  unlessM (isCompiled x) $ throwError $ NotCompiled x

  d   <- liftTCM $ getHaskellPragma x
  env <- askGHCEnv
  let is t p = Just t == p env

      namedType = do
        -- For these builtin types, the type name (xhqn ...) refers to the
        -- generated, but unused, datatype and not the primitive type.
        if  | x `is` ghcEnvNat ||
              x `is` ghcEnvInteger -> return $ hsCon "Integer"
            | x `is` ghcEnvBool    -> return $ hsCon "Bool"
            | otherwise            ->
              lift $ hsCon . prettyShow <$> xhqn TypeK x
  mapExceptT (setCurrentRange d) $ case d of
    _ | x `is` ghcEnvList ->
        lift $ hsCon . prettyShow <$> xhqn TypeK x
        -- we ignore Haskell pragmas for List
    _ | x `is` ghcEnvMaybe ->
        lift $ hsCon . prettyShow <$> xhqn TypeK x
        -- we ignore Haskell pragmas for Maybe
    _ | x `is` ghcEnvInf ->
        return $ hsQCon "MAlonzo.RTE" "Infinity"
    Just HsDefn{}      -> throwError $ WrongPragmaFor (getRange d) x
    Just HsType{}      -> namedType
    Just HsData{}      -> namedType
    _                  -> throwError $ NoPragmaFor x